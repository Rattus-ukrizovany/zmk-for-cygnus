/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
#include <dt-bindings/zmk/matrix_transform.h>
#define INPUT_EV_KEY 0x01               /**< Key event */
#define INPUT_EV_REL 0x02               /**< Relative coordinate event */
#define INPUT_EV_ABS 0x03               /**< Absolute coordinate event */
#define INPUT_EV_MSC 0x04               /**< Miscellaneous event */
#define INPUT_EV_VENDOR_START 0xf0      /**< Vendor specific event start */
#define INPUT_EV_VENDOR_STOP 0xff       /**< Vendor specific event stop */

#define INPUT_REL_X 0x00                /**< Relative X coordinate */
#define INPUT_REL_Y 0x01                /**< Relative Y coordinate */
#define INPUT_REL_WHEEL 0x08            /**< Relative wheel coordinate */
#define INPUT_REL_HWHEEL 0x06           /**< Relative horizontal wheel coordinate */
#define INPUT_REL_MISC 0x09             /**< Relative misc coordinate */

/ {
    chosen {
        zmk,kscan = &kscan0;
        zmk,matrix-transform = &default_transform;
    };

    default_transform: keymap_transform_0 {
        compatible = "zmk,matrix-transform";
        columns = <12>;
        rows = <4>;
        map = <
	 RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5)    RC(0,6) RC(0,7) RC(0,8) RC(0,9) RC(0,10) RC(0,11)
	 RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5)    RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10) RC(1,11)
	 RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5)    RC(2,6) RC(2,7) RC(2,8) RC(2,9) RC(2,10) RC(2,11)
					         RC(3,3) RC(3,4) RC(3,5)    RC(3,6) RC(3,7)RC(3,8)
                             RC(4,0) RC(4,1)
        >;
    };

    kscan0: kscan_composite {
        compatible = "zmk,kscan-composite";
        rows = <4>;
        columns = <3>;

        // Include the matrix driver
        matrix {
            kscan = <&mock_kscan>;
        };

        // Include the direct GPIO driver...
        direct {
            kscan = <&kscan_direct>;
            row-offset = <4>;
        };
    };

    mock_kscan: kscan_0 {
        compatible = "zmk,kscan-mock";
        columns = <0>;
        rows = <0>;
        events = <0>;
    };

    kscan_direct: kscan_direct {
        compatible = "zmk,kscan-gpio-direct";
        wakeup-source;
        input-gpios
            = <&gpio1 11 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
            , <&gpio0 10 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
            ;
    };
};

&pinctrl {
    spi1_default: spi1_default {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 0, 8)>,
                <NRF_PSEL(SPIM_MOSI, 0, 11)>,
                <NRF_PSEL(SPIM_MISO, 0, 11)>;
        };
    };

    spi1_sleep: spi1_sleep {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 0, 8)>,
                <NRF_PSEL(SPIM_MOSI, 0, 11)>,
                <NRF_PSEL(SPIM_MISO, 0, 11)>;
            low-power-enable;
        };
    };
};

&uart0 {
	status = "disabled";
};

&spi1 {
	compatible = "nordic,nrf-spim";
	status = "okay";
    pinctrl-0 = <&spi1_default>;
	pinctrl-1 = <&spi1_sleep>;
	pinctrl-names = "default", "sleep";
	cs-gpios = <&gpio0 19 GPIO_ACTIVE_LOW>;
	pd0: pd@0 {
		compatible = "pixart,pmw3610";
		status = "okay";
		label = "TRACKBALL0";
		reg = <0>;
		spi-max-frequency = <4000000>;
	    irq-gpios = <&gpio0 22 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
	    cpi = <600>;
	    evt-type = <INPUT_EV_REL>;
	    x-input-code = <INPUT_REL_X>;
	    y-input-code = <INPUT_REL_Y>;
	};
};


/{
  trackball_listener { 
    compatible = "zmk,input-listener";
    device = <&pd0>;
  };
};


/{
/*   auto toggle mouse key layer */
  trackball_auto_mouse_listener {
         compatible = "zmk,input-behavior-listener";
        device = <&pd0>;
        layers = <0>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
	scale-multiplier = <1>;
	scale-divisor = <1>;
        bindings = <&ib_tog_layer 4>;
   };

   /* input config for mouse scroll mode on momentary mouse scoll layer */
   trackball_scroll_listener {
           compatible = "zmk,input-behavior-listener";
           device = <&pd0>;
           layers = <2>;
           evt-type = <INPUT_EV_REL>;
           /* slienting x-axis with alt event code */
           x-input-code = <INPUT_REL_MISC>;
           y-input-code = <INPUT_REL_WHEEL>;   
           /* invent scrolling direction */
           y-invert;
           /* align to CCW 180 degree */
           rotate-deg = <180>;
           /* scale-multiplier = <1>; */
           scale-divisor = <8>; 
           /* NOTE 1: This settings do not compitable with y-invert and x-invert */
           /* NOTE 2: Floating point computation requires alot of ram. */
           /*         This feature will cuase stackove flow with CONFIG_ZMK_USB_LOGGING=y *   
           /* bind a behavior to down scaling input value to (1/8) */
           /* NOTE: This behavior is different to scale-divisor. */
           /*       The delta value is accumlated until result >= 1 after cast. */
           /*       The scrolling is preented in hi-res and allow precise scrolling */
           bindings = <&ib_wheel_scaler_x 1 64>;
   };

   trackball_peripheral_snipe_listener {
          compatible = "zmk,input-behavior-listener";
          device = <&pd0>;
          layers = <3>;
          evt-type = <INPUT_EV_REL>;
          x-input-code = <INPUT_REL_X>;
          y-input-code = <INPUT_REL_Y>;
          scale-multiplier = <1>;
          scale-divisor = <1>;
          /*rotate-deg = <315>;*/
          bindings = <&ib_snipe_scaler_x 1 8 &ib_snipe_scaler_y 1 8>;
   };

   /* adjust cooldown waiting period for mouse key layer (MSK) after activated */
   ib_tog_layer: ib_tog_layer {
        compatible = "zmk,input-behavior-tog-layer";
        #binding-cells = <1>;
        time-to-live-ms = <2000>;
    };

    /* define a resolution down scaler only for INPUT_REL_WHEEL */
    ib_wheel_scaler_x: ib_wheel_scaler_x {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    ib_wheel_scaler_y: ib_wheel_scaler_y {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_HWHEEL>;
    };

    ib_snipe_scaler_x: ib_snipe_scaler_x {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_X>;
    };

    ib_snipe_scaler_y: ib_snipe_scaler_y {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_Y>;
    };
};
